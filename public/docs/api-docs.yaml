openapi: 3.0.0
info:
  title: API de Gestion des Articles
  version: 1.0.0
  description: Documentation de l'API pour la gestion des articles, des utilisateurs, des clients , des dettes et leur paiement et de l'authentification

servers:
  - url: http://localhost:3000/wane/v1

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      bearer: 

  schemas:
    schemas:
    Client:
      type: object
      properties:
        id:
          type: integer
        telephone:
          type: string
        address:
          type: string
        surname:
          type: string
        active:
          type: boolean
        user:
          $ref: '#/components/schemas/User'
        dettes:
          type: array
          items:
            $ref: '#/components/schemas/Dette'
    
    User:
      type: object
      properties:
        id:
          type: integer
        nom:
          type: string
        prenom:
          type: string
        login:
          type: string
        role_id:
          type: integer
        photo:
          type: string

    
    Dette:
      type: object
      properties:
        id:
          type: integer
        montant:
          type: number
        statut:
          type: string

    StoreClientRequest:
      type: object
      properties:
        telephone:
          type: string
        address:
          type: string
        surname:
          type: string
        active:
          type: boolean
        user:
          $ref: '#/components/schemas/User'

    UpdateClientRequest:
      type: object
      properties:
        telephone:
          type: string
        address:
          type: string
        surname:
          type: string
        active:
          type: boolean
        user:
          $ref: '#/components/schemas/User'

    Error:
      type: object
      properties:
        message:
          type: string

    RegisterUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string

    Article:
      type: object
      properties:
        id:
          type: integer
        libelle:
          type: string
        price:
          type: float
        

    StoreArticleRequest:
      type: object
      properties:
        libelle:
          type: string

    ArticleUpdateRequest:
      type: object
      properties:
        libelle:
          type: string
        

    UpdateStockRequest:
      type: object
      properties:
        updated_articles:
          type: array
          items:
            type: object
            properties:
              article_id:
                type: integer
              qte:
                type: integer
      required:
        - updated_articles
      

    ClientDettes:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
          format: float
        due_date:
          type: string
          format: date
        status:
          type: string

    ClientUser:
      type: object
      properties:
        id:
          type: integer
        telephone:
          type: string
        address:
          type: string
        surname:
          type: string
        active:
          type: boolean      

  responses:
    UnauthorizedError:
      description: Authentification échouée, accès non autorisé
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string



paths:
  /register:
    post:
      security:
        - BearerAuth: []

      summary: Inscrire un nouvel utilisateur
      operationId: registerUser
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Erreur de validation des données

  /login:
    post:
      summary: Connecter un utilisateur
      operationId: loginUser
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'


  /users:
    get:
      security:
        - BearerAuth: []
      summary: Liste tous les utilisateurs
      tags:
        - Users
      parameters:
        - in: query
          name: role
          schema:
            type: string
          description: Filtrer les utilisateurs par rôle
        - in: query
          name: active
          schema:
            type: boolean
          description: Filtrer les utilisateurs par statut actif
      responses:
        '200':
          description: Liste des utilisateurs récupérée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  links:
                    type: object
                  meta:
                    type: object
        '500':
          description: Erreur serveur
    post:
      security:
        - BearerAuth: []
      summary: Crée un nouvel utilisateur
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                prenom:
                  type: string
                login:
                  type: string
                password:
                  type: string
                role:
                  type: string
                photo:
                  type: string
                  format: file
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Erreur de validation
        '500':
          description: Erreur serveur

  /users/{id}:
    get:
      security:
        - BearerAuth: []
      summary: Affiche un utilisateur spécifique
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur
      responses:
        '200':
          description: Utilisateur récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Utilisateur non trouvé
    put:
      security:
        - BearerAuth: []
      summary: Met à jour un utilisateur existant
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                prenom:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: Utilisateur mis à jour avec succès
        '404':
          description: Utilisateur non trouvé
        '422':
          description: Erreur de validation
    delete:
      security:
        - BearerAuth: []
      summary: Supprime un utilisateur
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur
      responses:
        '204':
          description: Utilisateur supprimé avec succès
        '404':
          description: Utilisateur non trouvé
  

  /articles:
    get:
      security:
        - BearerAuth: []
      summary: Afficher la liste des articles
      operationId: getArticles
      tags:
        - Articles
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Numéro de la page à afficher
        - in: query
          name: per_page
          schema:
            type: integer
            default: 15
          description: Nombre d'articles par page
        - in: query
          name: disponible
          schema:
            type: string
            enum: [oui, non]
          description: Filtrer les articles par disponibilité
        - in: query
          name: trashed
          schema:
            type: string
            enum: [oui, non]
          description: Filtrer les articles supprimés
      responses:
        '200':
          description: Liste des articles récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      security:
        - BearerAuth: []
      summary: Créer un nouvel article
      operationId: createArticle
      tags:
        - Articles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreArticleRequest'
      responses:
        '201':
          description: Article créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '500':
          description: Erreur interne du serveur

  /articles/{id}:
    get:
      security:
        - BearerAuth: []
      summary: Afficher un article spécifique
      operationId: getArticle
      tags:
        - Articles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'article à afficher
      responses:
        '200':
          description: Article récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article non trouvé
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      security:
        - BearerAuth: []
      summary: Mettre à jour un article spécifique
      operationId: updateArticle
      tags:
        - Articles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'article à mettre à jour
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleUpdateRequest'
      responses:
        '200':
          description: Article mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '500':
          description: Erreur interne du serveur
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      security:
        - BearerAuth: []
      summary: Supprimer un article spécifique (SoftDelete)
      operationId: deleteArticle
      tags:
        - Articles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'article à supprimer
      responses:
        '204':
          description: Article supprimé avec succès
        '500':
          description: Erreur interne du serveur
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /articles/update-stock:
    post:
      security:
        - BearerAuth: []
      summary: Mettre à jour la quantité en stock de plusieurs articles
      operationId: updateStock
      tags:
        - Articles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStockRequest'
      responses:
        '200':
          description: Stock mis à jour avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated_articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        message:
                          type: string
        '500':
          description: Erreur interne du serveur
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /clients:
    get:
      security:
        - BearerAuth: []
      summary: Lister les clients
      description: Lister les clients avec filtrage, tri et pagination.
      tags:
        - Clients
      parameters:
        - name: telephone
          in: query
          required: false
          schema:
            type: string
          description: Filtrer par téléphone
        - name: compte
          in: query
          required: false
          schema:
            type: string
          description: Filtrer par compte
        - name: active
          in: query
          required: false
          schema:
            type: boolean
          description: Filtrer par état actif/inactif
      responses:
        '200':
          description: Liste des clients récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'

    post:
      security:
        - BearerAuth: []
      summary: Créer un nouveau client
      description: Créer un nouveau client avec les informations fournies.
      tags:
        - Clients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreClientRequest'
      responses:
        '201':
          description: Client créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'              

  /clients/{id}:
    get:
      security:
        - BearerAuth: []
      summary: Afficher les détails d'un client
      description: Afficher les détails d'un client spécifique.
      tags:
        - Clients
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID du client
      responses:
        '200':
          description: Détails du client récupérés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - BearerAuth: []
      summary: Mettre à jour un client
      description: Mettre à jour les informations d'un client existant.
      tags:
        - Clients
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID du client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
      responses:
        '200':
          description: Client mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      security:
        - BearerAuth: []
      summary: Supprimer un client
      description: Supprimer un client existant.
      tags:
        - Clients
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID du client
      responses:
        '204':
          description: Client supprimé avec succès
        '404':
          description: Client non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /clients/{id}/dettes:
    get:
      security:
        - BearerAuth: []
      summary: Afficher les dettes d'un client
      description: Afficher les dettes associées à un client spécifique.
      tags:
        - Clients
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID du client
      responses:
        '200':
          description: Détails des dettes récupérés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDettes'
        '404':
          description: Client non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /clients/{id}/user:
    get:
      security:
        - BearerAuth: []
      summary: Afficher l'utilisateur d'un client
      description: Afficher l'utilisateur associé à un client spécifique.
      tags:
        - Clients
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID du client
      responses:
        '200':
          description: Détails de l'utilisateur récupérés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
        '404':
          description: Client non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    