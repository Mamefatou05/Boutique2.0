openapi: 3.0.0
info:
  title: API de Gestion des Articles
  version: 1.0.0
  description: Documentation de l'API pour la gestion des articles, des utilisateurs, et de l'authentification

servers:
  - url: http://localhost:3000/wane/v1

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearer: 

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RegisterUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string

  responses:
    UnauthorizedError:
      description: Authentification échouée, accès non autorisé
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string



paths:
  /register:
    post:
      summary: Inscrire un nouvel utilisateur
      operationId: registerUser
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Erreur de validation des données

  /login:
    post:
      summary: Connecter un utilisateur
      operationId: loginUser
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'


  /users/{id}:
    get:
      summary: Récupérer les informations d'un utilisateur spécifique
      operationId: getUser
      tags:
        - Utilisateurs
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur à afficher
      responses:
        '200':
          description: Utilisateur récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Utilisateur non trouvé
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /articles:
    get:
      summary: Afficher la liste des articles
      operationId: getArticles
      tags:
        - Articles
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Numéro de la page à afficher
        - in: query
          name: per_page
          schema:
            type: integer
            default: 15
          description: Nombre d'articles par page
        - in: query
          name: disponible
          schema:
            type: string
            enum: [oui, non]
          description: Filtrer les articles par disponibilité
        - in: query
          name: trashed
          schema:
            type: string
            enum: [oui, non]
          description: Filtrer les articles supprimés
      responses:
        '200':
          description: Liste des articles récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Créer un nouvel article
      operationId: createArticle
      tags:
        - Articles
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreArticleRequest'
      responses:
        '201':
          description: Article créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '500':
          description: Erreur interne du serveur

  /articles/{id}:
    get:
      summary: Afficher un article spécifique
      operationId: getArticle
      tags:
        - Articles
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'article à afficher
      responses:
        '200':
          description: Article récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article non trouvé
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      summary: Mettre à jour un article spécifique
      operationId: updateArticle
      tags:
        - Articles
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'article à mettre à jour
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleUpdateRequest'
      responses:
        '200':
          description: Article mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '500':
          description: Erreur interne du serveur
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Supprimer un article spécifique (SoftDelete)
      operationId: deleteArticle
      tags:
        - Articles
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'article à supprimer
      responses:
        '204':
          description: Article supprimé avec succès
        '500':
          description: Erreur interne du serveur
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /articles/update-stock:
    post:
      summary: Mettre à jour la quantité en stock de plusieurs articles
      operationId: updateStock
      tags:
        - Articles
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStockRequest'
      responses:
        '200':
          description: Stock mis à jour avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated_articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        message:
                          type: string
        '500':
          description: Erreur interne du serveur
        '401':
          $ref: '#/components/responses/UnauthorizedError'
